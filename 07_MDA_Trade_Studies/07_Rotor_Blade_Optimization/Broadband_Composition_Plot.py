import SUAVE 
from SUAVE.Core import Units , Data  

# Package Imports  
import numpy as np 
import matplotlib.pyplot as plt 
import matplotlib.cm as cm   
import matplotlib.colors as colors  
from mpl_toolkits.mplot3d import Axes3D  
import numpy as np
    
# ----------------------------------------------------------------------
#   Main
# ---------------------------------------------------------------------- 
def main():
    
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    
    n     = 100
    S     = 15
    theta = np.tile(np.linspace(-np.pi,-np.pi/2,n )[:,None],(1,n))
    phi   = np.tile(np.linspace(0,2*np.pi,n )[None,:],(n,1)) 
    
    #strength = np.ones_like(theta)  
    strength = np.tile(np.linspace(0,1,n )[:,None],(1,n)) #  np.random.rand(100,100)
    
    norm     = colors.Normalize(vmin = np.min(strength),
                          vmax = np.max(strength), clip = False)
    
    x = S * np.sin(theta) * np.cos(phi)
    y = S * np.sin(theta) * np.sin(phi)
    z = S * np.cos(theta)
    
    ax.plot_surface(x, y, z, rstride=1, cstride=1, cmap=cm.coolwarm,
                           linewidth=0, antialiased=False,
                           facecolors=cm.coolwarm(norm(strength)))
    
    plt.show()
    
    

    ## Add to rotor definition  

    #plt.rcParams['axes.linewidth'] = 2.
    #plt.rcParams["font.family"] = "Times New Roman"
    #parameters = {'axes.labelsize': 32,
                  #'legend.fontsize': 22,
                  #'xtick.labelsize': 28,
                  #'ytick.labelsize': 28,
                  #'axes.titlesize': 32}
    #plt.rcParams.update(parameters)
    #PP                  = Data()
    #PP.line_width       = 2
    #PP.line_styles      = ['--',':','-.']
    #PP.figure_width     = 10
    #PP.figure_height    = 7
    #PP.marker_size      = 10
    #PP.legend_font_size = 20
    #PP.plot_grid        = True  
    #PP.colors           = cm.inferno(np.linspace(0,1,6))    
    
    
    #raw_plot_data = load_data()
    #PD =  data_interpolation(raw_plot_data)
    ## ------------------------------------------------------------------
    ##   Twist Distribition
    ## ------------------------------------------------------------------
    #fig_1_name = "Rotor_Broadband_Noise_Compoments"
    #fig_1 = plt.figure(fig_1_name)
    #fig_1.set_size_inches(PP.figure_width,PP.figure_height)
    #axis_1 = fig_1.add_subplot(1,1,1)
    #axis_1.plot(PD.frequency,PD.BTE       , color = PP.colors[0], linestyle = PP.line_styles[0], linewidth = PP.line_width, label = "BTE"       )
    #axis_1.plot(PD.frequency,PD.TIP       , color = PP.colors[1], linestyle = PP.line_styles[1], linewidth = PP.line_width, label = "TIP"       )
    #axis_1.plot(PD.frequency,PD.LBL_VS    , color = PP.colors[2], linestyle = PP.line_styles[2], linewidth = PP.line_width, label = "LBL-VS"    )
    #axis_1.plot(PD.frequency,PD.TBL_TE    , color = PP.colors[3], linestyle = PP.line_styles[0], linewidth = PP.line_width, label = "TBL-TE"    )
    #axis_1.plot(PD.frequency,PD.BWI       , color = PP.colors[4], linestyle = PP.line_styles[1], linewidth = PP.line_width, label = "BWI"       )
    #axis_1.plot(PD.frequency,PD.BVI       , color = PP.colors[5], linestyle = PP.line_styles[2], linewidth = PP.line_width, label = "BVI"       )
    #axis_1.plot(PD.frequency,PD.Total_pred, color = 'gray' , linestyle = '-', linewidth = 3 , label = "Total pred")
    #axis_1.plot(PD.frequency,PD.Measured  , color = 'black', linestyle = '-', linewidth = 3 , label = "Measured"  ) 
    #axis_1.set_ylabel('SPL (dB)') 
    #axis_1.set_xlabel('Frequency (kHz)')    
    #axis_1.minorticks_on()   
     
    #fig_1.tight_layout()  
    #fig_1.savefig(fig_1_name  + '.pdf')        
     
    return  


def data_interpolation(raw_data):
    
    frequency = np.linspace(0,20,100)   
    
    func_BTE         = np.interp1d(raw_data.BTE       [:,0] ,raw_data.BTE       [:,1] ,kind = 'cubic')    
    func_TIP         = np.interp1d(raw_data.TIP       [:,0] ,raw_data.TIP       [:,1] ,kind = 'cubic')
    func_LBL_VS      = np.interp1d(raw_data.LBL_VS    [:,0] ,raw_data.LBL_VS    [:,1] ,kind = 'cubic')
    func_TBL_TE      = np.interp1d(raw_data.TBL_TE    [:,0] ,raw_data.TBL_TE    [:,1] ,kind = 'cubic')
    func_BWI         = np.interp1d(raw_data.BWI       [:,0] ,raw_data.BWI       [:,1] ,kind = 'cubic')
    func_BVI         = np.interp1d(raw_data.BVI       [:,0] ,raw_data.BVI       [:,1] ,kind = 'cubic')
    func_Total_pred  = np.interp1d(raw_data.Total_pred[:,0] ,raw_data.Total_pred[:,1] ,kind = 'cubic')
    func_Measured    = np.interp1d(raw_data.Measured  [:,0] ,raw_data.Measured  [:,1] ,kind = 'cubic') 
    
    
    processed_BTE        = func_BTE(frequency)
    processed_TIP        = func_TIP(frequency)
    processed_LBL_VS     = func_LBL_VS(frequency)
    processed_TBL_TE     = func_TBL_TE(frequency)
    processed_BWI        = func_BWI(frequency)
    processed_BVI        = func_BVI(frequency)
    processed_Total_pred = func_Total_pred(frequency)
    processed_Measured   = func_Measured(frequency)
    
    
    
    
    
    
    prococessed_data = Data(
        frequency    = frequency,
        BTE          = processed_BTE,       
        TIP          = processed_TIP,       
        LBL_VS       = processed_LBL_VS,    
        TBL_TE       = processed_TBL_TE,    
        BWI          = processed_BWI,       
        BVI          = processed_BVI,       
        Total_pred   = processed_Total_pred,
        Measured     = processed_Measured   
    
    )
    return prococessed_data

def load_data():
    

    BTE = np.array([[12.160804020100503, 0.6560073092736474],
                    [13.065326633165828, 2.664230242119686],
                    [14.60636515912898, 4.678239683264806],
                    [16.247906197654945, 6.693162783615037],
                    [17.922948073701846, 8.52657225521547],
                    [19.262981574539367, 9.811481650677635],
                    [19.966499162479064, 10.726968174204359]])


    TIP = np.array([[6.130653266331659, 0.419369575148479],
                    [7.6046901172529315, 3.88731536470230],
                    [9.212730318257957, 6.81102482107508],
                    [11.055276381909547, 9.19141160347190],
                    [13.065326633165828, 11.2096847875742],
                    [15.611390284757121, 12.3237399116795],
                    [17.755443886097154, 12.8886858535099],
                    [19.83249581239531, 13.45302268920357]])


    LBL_VS = np.array([[3.8190954773869343, 0.580173595248979],
                       [4.656616415410386, 5.133241967412815],
                       [5.494137353433836, 9.686310339576664],
                       [6.197654941373535, 16.05634231764884],
                       [7.135678391959799, 20.610324349017816],
                       [8.341708542713569, 26.257651895842855],
                       [9.614740368509214, 29.54195218516827],
                       [11.088777219430487, 31.73717070199481],
                       [12.663316582914575, 32.29693924166285],
                       [14.740368509212733, 31.40673062281102],
                       [16.48241206030151, 29.604385564184568],
                       [17.855946398659967, 27.43505405816964],
                       [19.899497487437188, 23.81726815897670]])


    TBL_TE = np.array([[0.2680067001675037, 0.547890970001], 
                       [0.6030150753768844, 6.369118318867], 
                       [0.9045226130653257, 11.82640475102], 
                       [1.608040201005025, 17.105527638190], 
                       [2.4790619765494135, 21.11344601796], 
                       [3.7185929648241194, 24.57925993604], 
                       [5.192629815745394, 26.956296634688], 
                       [6.934673366834171, 27.699406121516], 
                       [9.68174204355109, 28.0880158367595], 
                       [12.663316582914575, 27.75148469620], 
                       [15.477386934673369, 27.23161260849], 
                       [17.98994974874372, 26.708999543170], 
                       [19.83249581239531, 26.3621135982945]])


    BWI = np.array([[0.0670016750418756, 5.091518197045829],
                    [0.30150753768844174, 12.9118318867062],
                    [0.4355108877721938, 18.91305009897974],
                    [0.636515912897822, 24.36942287193544],
                    [0.8375209380234505, 31.82579564489111],
                    [0.9715242881072026, 39.64519567534643],
                    [1.1055276381909547, 46.737322978529],
                    [1.3735343383584588, 51.64885031216688],
                    [2.0100502512562812, 52.20009136592051],
                    [2.6800670016750407, 50.38800060910613],
                    [3.9195979899497484, 46.39926907263589],
                    [5.226130653266332, 38.77478300593879],
                    [6.599664991624791, 30.2418151362875],
                    [8.14070351758794, 22.61946094106898],
                    [9.380234505862646, 16.994365768235127],
                    [10.68676716917923, 10.642606974265263],
                    [12.629815745393635, 0.478452870412681]])


    BVI = np.array([[0.10050251256281362, 97.273640931932],
                    [0.20100502512562768, 79.092736409319],
                    [0.30150753768844174, 74.911831886706],
                    [0.33500837520937976, 68.003045530683],
                    [0.5360134003350079, 50.5503273945484],
                    [0.636515912897822, 69.46033196284452],
                    [0.7035175879396984, 76.0063956144358],
                    [0.737018425460636, 81.09760925841326],
                    [1.0050251256281397, 86.3727729556875],
                    [1.2730318257956448, 85.6479366529617],
                    [1.474036850921272, 78.74067306228109],
                    [1.809045226130653, 68.74371859296483],
                    [1.9765494137353432, 56.0179686310339],
                    [2.0100502512562812, 43.6546368204659],
                    [2.0435510887772192, 29.4731231917161],
                    [2.1775544388609713, 40.5652504948987],
                    [2.4455611390284755, 45.4767778285366],
                    [2.7470686767169177, 39.8431551697883],
                    [2.8810720268006698, 34.2080097456981],
                    [3.082077051926298, 37.66438251865386],
                    [3.316582914572864, 35.3028780264961],
                    [3.6515912897822442, 33.8513781026343],
                    [4.1206030150753765, 36.5829145728643],
                    [4.589614740368509, 19.67808740673062],
                    [4.824120603015076, 13.86203746002740],
                    [4.824120603015076, 17.49840109639103],
                    [5.125628140703518, 19.86477843764277],
                    [5.226130653266332, 13.86569209684788],
                    [5.494137353433836, 22.59540124866757],
                    [5.59463986599665, 0.9599512715090555]])


    Total_pred = np.array([[0.16750418760468966, 96.183340947160],
                           [0.3685092127303182, 72.3669864473884],
                           [0.5360134003350079, 58.9139637581848],
                           [0.7035175879396984, 73.6427592507994],
                           [0.770519262981574, 80.55245926602709],
                           [1.0050251256281397, 86.5545911375057],
                           [1.3400335008375208, 84.5576366681894],
                           [1.7085427135678382, 70.5609867519415],
                           [1.9765494137353432, 58.5634231764885],
                           [2.0100502512562812, 54.2000913659205],
                           [2.2110552763819094, 52.9291914116034],
                           [2.4120603015075375, 53.2946550936500],
                           [2.9480737018425467, 50.5722552154712],
                           [3.9195979899497484, 47.8538145271813],
                           [4.991624790619766, 41.4999238617329],
                           [6.030150753768845, 36.7820922795797],
                           [7.906197654941374, 33.70823816049946],
                           [10.050251256281406, 35.1822750114207],
                           [12.428810720268007, 35.9311710065478],
                           [15.242881072026801, 34.6840261915638],
                           [17.82244556113903, 32.88929495964670],
                           [19.86599664991625, 31.27150906045378]])


    Measured = np.array([[0.0670016750418756, 62.18242728795491],
                         [0.20100502512562768, 64.7291000456829],
                         [0.4690117252931323, 60.91335465204811],
                         [0.5360134003350079, 67.4594183036394],
                         [0.636515912897822, 74.5512410537536],
                         [0.737018425460636, 80.37033653114054],
                         [0.9045226130653257, 82.19004111466421],
                         [1.0720268006700167, 83.46429115273335],
                         [1.1390284757118918, 78.73762753159737],
                         [1.3065326633165828, 73.10278666057559],
                         [1.641541038525963, 74.01492310035022],
                         [1.775544388609715, 68.01614131262372],
                         [1.9430485762144052, 59.83584589614739],
                         [2.1775544388609713, 56.92888685853509],
                         [2.3785594639865995, 59.47616872239987],
                         [2.6465661641541036, 58.9331506014923],
                         [2.8140703517587937, 51.29830973047053],
                         [2.9480737018425467, 48.57225521547129],
                         [3.015075376884422, 45.66377341251712],
                         [3.182579564489112, 48.57438708694989],
                         [3.38358458961474, 49.8489416780874],
                         [3.618090452261307, 48.21470991320237],
                         [3.9865996649916253, 45.85442363331809],
                         [4.221105527638191, 46.947464595705796],
                         [4.522613065326633, 43.13202375513933],
                         [4.790619765494137, 40.95264199786811],
                         [5.326633165829146, 40.04842393787116],
                         [5.494137353433836, 40.77721943048576],
                         [5.8291457286432165, 40.23481041571492],
                         [6.197654941373535, 39.69270595401248],
                         [6.566164154103851, 39.87787421958275],
                         [6.968174204355109, 40.608801583675955],
                         [7.135678391959799, 38.610324349017816],
                         [7.437185929648241, 37.52215623572407],
                         [7.839195979899498, 36.798538145271806],
                         [8.308207705192629, 36.43916552459265],
                         [8.609715242881073, 38.26008832038981],
                         [9.112227805695142, 36.99192934368813],
                         [9.413735343383586, 35.72194304857621],
                         [10.016750418760466, 35.72742500380691],
                         [10.586264656616414, 35.1871478605147],
                         [10.854271356783919, 33.73503883051622],
                         [11.155778894472359, 34.28323435358611],
                         [11.658291457286431, 36.28780264961169],
                         [11.758793969849247, 34.10689812699863],
                         [12.093802345058627, 33.01903456677326],
                         [12.596314907872696, 31.38723922643521],
                         [13.199329983249584, 30.66544845439317],
                         [13.400335008375212, 29.21273031825795],
                         [13.5678391959799, 31.032434901781627],
                         [13.735343383584592, 28.48850312166895],
                         [14.103852596314908, 29.03730775087558],
                         [14.20435510887772, 27.038221410080695],
                         [14.60636515912898, 28.86005786508298],
                         [14.974874371859297, 26.13613522156235]])
    
    Raw_Plot_Data = Data( 
        BTE        = BTE,
        TIP        = TIP,
        LBL_VS     = LBL_VS ,
        TBL_TE     = TBL_TE ,
        BWI        = BWI,
        BVI        = BVI,
        Total_pred = Total_pred ,  
        Measured   = Measured  
    )    

    return Raw_Plot_Data 
 
if __name__ == '__main__': 
    main() 
    plt.show()