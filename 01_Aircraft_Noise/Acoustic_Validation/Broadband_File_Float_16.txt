Memory: float 16 

Last login: Mon Dec 13 18:24:58 on ttys000
(base) matthewclarke@Matthews-MacBook-Pro-6 ~ % cd Documents/STANFORD/Thesis/01_Aircraft_Noise/Acoustic_Validation
(base) matthewclarke@Matthews-MacBook-Pro-6 Acoustic_Validation % python -m memory_profiler Acoustic_Noise_Comparison_Tests.py
Filename: /Users/matthewclarke/Documents/SUAVE/SUAVE/trunk/SUAVE/Methods/Noise/Fidelity_One/Propeller/compute_broadband_noise.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    23    675.9 MiB    675.9 MiB           1   @profile
    24                                         def compute_broadband_noise(freestream,angle_of_attack,blade_section_position_vectors,
    25                                                                     velocity_vector,network,auc_opts,settings,res,source):
    26                                             '''This computes the trailing edge noise compoment of broadband noise of a propeller or 
    27                                             rotor in the frequency domain
    28                                             
    29                                             Assumptions:
    30                                                 UPDATE
    31                                         
    32                                             Source:
    33                                                UPDATE
    34                                             
    35                                             
    36                                             Inputs:  
    37                                                 freestream                    - freestream data structure                                                   [m/s]
    38                                                 angle_of_attack               - aircraft angle of attack                                                    [rad]
    39                                                 position_vector               - position vector of aircraft                                                 [m]
    40                                                 velocity_vector               - velocity vector of aircraft                                                 [m/s]
    41                                                 network                       - energy network object                                                       [None] 
    42                                                 auc_opts                      - data structure of acoustic data                                             [None] 
    43                                                 settings                      - accoustic settings                                                          [None] 
    44                                             
    45                                             Outputs 
    46                                                res.                                       *acoustic data is stored and passed in data structures*                        
    47                                                    SPL_prop_broadband_spectrum           - harmonic noise in blade passing frequency spectrum              [dB]
    48                                                    SPL_prop_broadband_spectrum_dBA       - dBA-Weighted harmonic noise in blade passing frequency spectrum [dbA]     
    49                                                    SPL_prop_broadband_1_3_spectrum       - harmonic noise in 1/3 octave spectrum                           [dB]
    50                                                    SPL_prop_broadband_1_3_spectrum_dBA   - dBA-Weighted harmonic noise in 1/3 octave spectrum              [dBA] 
    51                                                    p_pref_broadband                      - pressure ratio of harmonic noise                                [Unitless]
    52                                                    p_pref_broadband_dBA                  - pressure ratio of dBA-weighted harmonic noise                   [Unitless]
    53                                                
    54                                                
    55                                                
    56                                                     
    57                                             Properties Used:
    58                                                 N/A   
    59                                             '''     
    60                                         
    61    675.9 MiB      0.0 MiB           1       num_cpt         = len(angle_of_attack) 
    62    675.9 MiB      0.0 MiB           1       num_prop        = len(blade_section_position_vectors.blade_section_coordinate_sys[0,0,:,0,0,0,0,0]) 
    63    675.9 MiB      0.0 MiB           1       num_mic         = len(blade_section_position_vectors.blade_section_coordinate_sys[0,:,0,0,0,0,0,0])
    64    675.9 MiB      0.0 MiB           1       precision       = settings.floating_point_precision
    65                                             
    66    675.9 MiB      0.0 MiB           1       if source == 'lift_rotors':  
    67                                                 propellers      = network.lift_rotors 
    68                                             else:
    69    675.9 MiB      0.0 MiB           1           propellers      = network.propellers
    70                                                 
    71    675.9 MiB      0.0 MiB           1       propeller       = propellers[list(propellers.keys())[0]]   
    72                                             
    73    675.9 MiB      0.0 MiB           1       BSR       = settings.broadband_spectrum_resolution # broadband spectrum resolution    
    74    675.9 MiB      0.0 MiB           1       POS       = blade_section_position_vectors.blade_section_coordinate_sys   
    75    675.9 MiB      0.0 MiB           1       POS_2     = blade_section_position_vectors.vehicle_coordinate_sys           
    76    675.9 MiB      0.0 MiB           1       r         = blade_section_position_vectors.r                               
    77    675.9 MiB      0.0 MiB           1       beta_p    = blade_section_position_vectors.beta_p                          
    78    675.9 MiB      0.0 MiB           1       phi       = blade_section_position_vectors.phi                             
    79    675.9 MiB      0.0 MiB           1       alpha_eff = blade_section_position_vectors.alpha_eff                              
    80    675.9 MiB      0.0 MiB           1       t_v       = blade_section_position_vectors.t_v                             
    81    675.9 MiB      0.0 MiB           1       t_r       = blade_section_position_vectors.t_r                               
    82    675.9 MiB      0.0 MiB           1       M_hub     = blade_section_position_vectors.M_hub   
    83                                             
    84                                             # ----------------------------------------------------------------------------------
    85                                             # Trailing Edge Noise
    86                                             # ---------------------------------------------------------------------------------- 
    87    675.9 MiB      0.0 MiB           1       p_ref              = 2E-5                               # referece atmospheric pressure
    88    675.9 MiB      0.0 MiB           1       c_0                = freestream.speed_of_sound          # speed of sound
    89    675.9 MiB      0.0 MiB           1       rho                = freestream.density                 # air density 
    90    675.9 MiB      0.0 MiB           1       dyna_visc          = freestream.dynamic_viscosity
    91    675.9 MiB      0.0 MiB           1       kine_visc          = dyna_visc/rho                      # kinematic viscousity    
    92    675.9 MiB      0.0 MiB           1       alpha_blade        = auc_opts.disc_effective_angle_of_attack 
    93    675.9 MiB      0.0 MiB           1       Vt_2d              = auc_opts.disc_tangential_velocity  
    94    675.9 MiB      0.0 MiB           1       Va_2d              = auc_opts.disc_axial_velocity                
    95    675.9 MiB      0.0 MiB           1       blade_chords       = propeller.chord_distribution        # blade chord    
    96    675.9 MiB      0.0 MiB           1       r                  = propeller.radius_distribution        # radial location   
    97    675.9 MiB      0.0 MiB           1       num_sec            = len(r) 
    98    675.9 MiB      0.0 MiB           1       num_azi            = len(auc_opts.disc_effective_angle_of_attack[0,0,:])   
    99    675.9 MiB      0.0 MiB           1       U_blade            = np.sqrt(Vt_2d**2 + Va_2d **2)
   100    675.9 MiB      0.0 MiB           2       Re_blade           = U_blade*np.repeat(np.repeat(blade_chords[np.newaxis,:],num_cpt,axis=0)[:,:,np.newaxis],num_azi,axis=2)*\
   101    675.9 MiB      0.0 MiB           1                             np.repeat(np.repeat((rho/dyna_visc),num_sec,axis=1)[:,:,np.newaxis],num_azi,axis=2)
   102    675.9 MiB      0.0 MiB           1       rho_blade          = np.repeat(np.repeat(rho,num_sec,axis=1)[:,:,np.newaxis],num_azi,axis=2)
   103    675.9 MiB      0.0 MiB           1       U_inf              = np.atleast_2d(np.linalg.norm(velocity_vector,axis=1)).T
   104    675.9 MiB      0.0 MiB           1       M                  = U_inf/c_0                                             
   105    675.9 MiB      0.0 MiB           1       B                  = propeller.number_of_blades          # number of propeller blades
   106    675.9 MiB      0.0 MiB           1       Omega              = auc_opts.omega                      # angular velocity   
   107    675.9 MiB      0.0 MiB           1       pi                 = np.pi 
   108    675.9 MiB      0.0 MiB           1       beta_sq            = 1 - M**2                                  
   109    675.9 MiB      0.0 MiB           1       delta_r            = np.zeros_like(r)
   110    675.9 MiB      0.0 MiB           1       del_r              = r[1:] - r[:-1]
   111    675.9 MiB      0.0 MiB           1       delta_r[0]         = 2*del_r[0]
   112    675.9 MiB      0.0 MiB           1       delta_r[-1]        = 2*del_r[-1]
   113    675.9 MiB      0.0 MiB           1       delta_r[1:-1]      =  (del_r[:-1]+ del_r[1:])/2 
   114                                         
   115    675.9 MiB      0.0 MiB           1       delta        = np.zeros((num_cpt,num_mic,num_prop,num_sec,num_azi,BSR,2), dtype=precision) #  control points ,  number rotors, number blades , number sections , sides of airfoil   
   116    675.9 MiB      0.0 MiB           1       delta_star   = np.zeros_like(delta, dtype=precision)
   117    675.9 MiB      0.0 MiB           1       dp_dx        = np.zeros_like(delta, dtype=precision)
   118    675.9 MiB      0.0 MiB           1       tau_w        = np.zeros_like(delta, dtype=precision)
   119    689.1 MiB     13.2 MiB           1       Ue           = np.zeros_like(delta, dtype=precision)
   120    702.4 MiB     13.2 MiB           1       Theta        = np.zeros_like(delta, dtype=precision)  
   121                                             # ------------------------------------------------------------
   122                                             # ****** TRAILING EDGE BOUNDARY LAYER PROPERTY CALCULATIONS  ****** 
   123    702.4 MiB      0.0 MiB           2       for i in range(num_cpt) : # lower surface is 0, upper surface is 1  
   124    702.4 MiB      0.0 MiB           1           TE_idx                  = 4 # assume trailing edge is the forth from last panel  
   125                                                 
   126    702.4 MiB      0.0 MiB           1           if propeller.nonuniform_freestream:
   127                                                     pass
   128                                                 else:
   129    702.4 MiB      0.0 MiB           1               Re_batch                = np.atleast_2d(Re_blade[i,:,0]).T
   130    702.4 MiB      0.0 MiB           1               AoA_batch               = np.atleast_2d(alpha_blade[i,:,0]).T
   131    702.4 MiB      0.0 MiB           1               npanel                  = len(propeller.airfoil_data.x_coordinates[0]) - 2
   132    100.5 MiB   -601.8 MiB           1               AP                      = airfoil_analysis(propeller.airfoil_data,AoA_batch,Re_batch, npanel, batch_analysis = False, airfoil_stations = propeller.airfoil_polar_stations)    
   133                                                     
   134                                                     # extract properties 
   135    100.6 MiB      0.1 MiB           1               lower_surface_theta      = np.repeat(np.atleast_2d(AP.theta[:,TE_idx]).T,num_azi,axis = 1)  
   136    100.6 MiB      0.0 MiB           1               lower_surface_delta      = np.repeat(np.atleast_2d(AP.delta[:,TE_idx]).T,num_azi,axis = 1)  
   137    100.6 MiB      0.0 MiB           1               lower_surface_delta_star = np.repeat(np.atleast_2d(AP.delta_star[:,TE_idx]).T,num_azi,axis = 1)   
   138    100.6 MiB      0.0 MiB           1               lower_surface_cf         = np.repeat(np.atleast_2d(AP.Cf[:,TE_idx]).T,num_azi,axis = 1)   
   139    100.7 MiB      0.1 MiB           1               lower_surface_Ue         = np.repeat(np.atleast_2d(AP.Ue_Vinf[:,TE_idx]).T,num_azi,axis = 1)   
   140    100.7 MiB      0.0 MiB           1               lower_surface_H          = np.repeat(np.atleast_2d(AP.H[:,TE_idx]).T,num_azi,axis = 1)   
   141    101.0 MiB      0.3 MiB           1               surface_dcp_dx           = (np.diff(AP.Cp,axis = 1)/np.diff(AP.x,axis = 1))
   142    101.0 MiB      0.0 MiB           1               lower_surface_dcp_dx     = np.repeat(np.atleast_2d(abs(surface_dcp_dx[:,TE_idx]/blade_chords)  ).T,num_azi,axis = 1)  
   143    101.0 MiB      0.0 MiB           1               upper_surface_theta      = np.repeat(np.atleast_2d(AP.theta[:,-TE_idx]).T,num_azi,axis = 1)   
   144    101.0 MiB      0.0 MiB           1               upper_surface_delta      = np.repeat(np.atleast_2d(AP.delta[:,-TE_idx]).T,num_azi,axis = 1)   
   145    101.1 MiB      0.0 MiB           1               upper_surface_delta_star = np.repeat(np.atleast_2d(AP.delta_star[:,-TE_idx]).T,num_azi,axis = 1)   
   146    101.1 MiB      0.0 MiB           1               upper_surface_cf         = np.repeat(np.atleast_2d(AP.Cf[:,-TE_idx]).T,num_azi,axis = 1)   
   147    101.1 MiB      0.1 MiB           1               upper_surface_Ue         = np.repeat(np.atleast_2d(AP.Ue_Vinf[:,-TE_idx]).T,num_azi,axis = 1)   
   148    101.1 MiB      0.0 MiB           1               upper_surface_H          = np.repeat(np.atleast_2d(AP.H[:,-TE_idx]).T,num_azi,axis = 1)     
   149    101.1 MiB      0.0 MiB           1               upper_surface_dcp_dx     = np.repeat(np.atleast_2d(abs(surface_dcp_dx[:,-TE_idx]/blade_chords)).T,num_azi,axis = 1)       
   150                                             
   151                                                 # replace nans 0 with mean as a post post-processor  
   152    101.4 MiB      0.3 MiB           1           lower_surface_theta       = np.nan_to_num(lower_surface_theta)
   153    101.4 MiB      0.0 MiB           1           lower_surface_delta       = np.nan_to_num(lower_surface_delta)
   154    101.4 MiB      0.0 MiB           1           lower_surface_delta_star  = np.nan_to_num(lower_surface_delta_star)
   155    101.4 MiB      0.0 MiB           1           lower_surface_cf          = np.nan_to_num(lower_surface_cf)
   156    101.4 MiB      0.0 MiB           1           lower_surface_dcp_dx      = np.nan_to_num(lower_surface_dcp_dx)
   157    101.4 MiB      0.0 MiB           1           lower_surface_Ue          = np.nan_to_num(lower_surface_Ue)
   158    101.4 MiB      0.0 MiB           1           lower_surface_H           = np.nan_to_num(lower_surface_H)
   159    101.4 MiB      0.0 MiB           1           upper_surface_theta       = np.nan_to_num(upper_surface_theta)
   160    101.4 MiB      0.0 MiB           1           upper_surface_delta       = np.nan_to_num(upper_surface_delta)
   161    101.4 MiB      0.0 MiB           1           upper_surface_delta_star  = np.nan_to_num(upper_surface_delta_star)
   162    101.4 MiB      0.0 MiB           1           upper_surface_cf          = np.nan_to_num(upper_surface_cf)
   163    101.4 MiB      0.0 MiB           1           upper_surface_dcp_dx      = np.nan_to_num(upper_surface_dcp_dx)
   164    101.4 MiB      0.0 MiB           1           upper_surface_Ue          = np.nan_to_num(upper_surface_Ue)
   165    101.5 MiB      0.0 MiB           1           upper_surface_H           = np.nan_to_num(upper_surface_H)    
   166                                             
   167    101.6 MiB      0.1 MiB           1           lower_surface_theta[lower_surface_theta == 0]           = np.mean(lower_surface_theta)
   168    101.6 MiB      0.0 MiB           1           lower_surface_delta[lower_surface_delta == 0]           = np.mean(lower_surface_delta)
   169    101.6 MiB      0.0 MiB           1           lower_surface_delta_star[lower_surface_delta_star == 0] = np.mean(lower_surface_delta_star)
   170    101.6 MiB      0.0 MiB           1           lower_surface_cf[lower_surface_cf == 0]                 = np.mean(lower_surface_cf)
   171    101.6 MiB      0.0 MiB           1           lower_surface_dcp_dx[lower_surface_dcp_dx == 0]         = np.mean(lower_surface_dcp_dx)
   172    101.6 MiB      0.0 MiB           1           lower_surface_Ue[lower_surface_Ue == 0]                 = np.mean(lower_surface_Ue)
   173    101.6 MiB      0.0 MiB           1           lower_surface_H[lower_surface_H == 0]                   = np.mean(lower_surface_H)
   174    101.6 MiB      0.0 MiB           1           upper_surface_theta[upper_surface_theta == 0]           = np.mean(upper_surface_theta)
   175    101.6 MiB      0.0 MiB           1           upper_surface_delta[upper_surface_delta == 0]           = np.mean(upper_surface_delta)
   176    101.6 MiB      0.0 MiB           1           upper_surface_delta_star[upper_surface_delta_star== 0]  = np.mean(upper_surface_delta_star)
   177    101.6 MiB      0.0 MiB           1           upper_surface_cf[upper_surface_cf == 0]                 = np.mean(upper_surface_cf)
   178    101.6 MiB      0.0 MiB           1           upper_surface_dcp_dx[upper_surface_dcp_dx == 0]         = np.mean(upper_surface_dcp_dx)
   179    101.6 MiB      0.0 MiB           1           upper_surface_Ue[upper_surface_Ue == 0]                 = np.mean(upper_surface_Ue)
   180    101.6 MiB      0.0 MiB           1           upper_surface_H[upper_surface_H == 0]                   = np.mean(upper_surface_H)     
   181                                            
   182                                                 # ------------------------------------------------------------
   183                                                 # ****** TRAILING EDGE BOUNDARY LAYER PROPERTY CALCULATIONS  ******  
   184                                          
   185    130.6 MiB     29.0 MiB           1           delta_star[i,:,:,:,:,:,0]   = vectorize(lower_surface_delta_star,num_cpt,num_mic,num_sec,num_prop,num_azi,BSR,precision,vectorize_method = 7)                               # lower surfacedisplacement thickness 
   186    130.6 MiB      0.1 MiB           1           delta_star[i,:,:,:,:,:,1]   = vectorize(upper_surface_delta_star,num_cpt,num_mic,num_sec,num_prop,num_azi,BSR,precision,vectorize_method = 7)                               # upper surface displacement thickness   
   187    143.9 MiB     13.2 MiB           1           dp_dx[i,:,:,:,:,:,0]        = vectorize(lower_surface_dcp_dx,num_cpt,num_mic,num_sec,num_prop,num_azi,BSR,precision,vectorize_method = 7)                                   # lower surface pressure differential 
   188    143.9 MiB      0.0 MiB           1           dp_dx[i,:,:,:,:,:,1]        = vectorize(upper_surface_dcp_dx,num_cpt,num_mic,num_sec,num_prop,num_azi,BSR,precision,vectorize_method = 7)                                   # upper surface pressure differential 
   189    143.9 MiB      0.0 MiB           1           U_e_lower_surf              = lower_surface_Ue*U_blade[i]
   190    143.9 MiB      0.0 MiB           1           U_e_upper_surf              = upper_surface_Ue*U_blade[i]
   191    157.1 MiB     13.2 MiB           1           Ue[i,:,:,:,:,:,0]           = vectorize(U_e_lower_surf,num_cpt,num_mic,num_sec,num_prop,num_azi,BSR,precision,vectorize_method = 7)                                                    # lower surface boundary layer edge velocity 
   192    157.1 MiB      0.0 MiB           1           Ue[i,:,:,:,:,:,1]           = vectorize(U_e_upper_surf,num_cpt,num_mic,num_sec,num_prop,num_azi,BSR,precision,vectorize_method = 7)                                                   # upper surface boundary layer edge velocity 
   193    170.4 MiB     13.2 MiB           1           tau_w[i,:,:,:,:,:,0]        = vectorize(lower_surface_cf*(0.5*rho_blade[i]*(U_e_lower_surf**2)),num_cpt,num_mic,num_sec,num_prop,num_azi,BSR,precision,vectorize_method = 7)    # lower surface wall shear stress
   194    170.4 MiB      0.0 MiB           1           tau_w[i:,:,:,:,:,:,1]       = vectorize(upper_surface_cf*(0.5*rho_blade[i]* (U_e_upper_surf**2)),num_cpt,num_mic,num_sec,num_prop,num_azi,BSR,precision,vectorize_method = 7)    # upper surface wall shear stress 
   195    183.6 MiB     13.2 MiB           1           Theta[i,:,:,:,:,:,0]        = vectorize(lower_surface_theta,num_cpt,num_mic,num_sec,num_prop,num_azi,BSR,precision,vectorize_method = 7)                                    # lower surface momentum thickness     
   196    183.6 MiB      0.0 MiB           1           Theta[i,:,:,:,:,:,1]        = vectorize(upper_surface_theta,num_cpt,num_mic,num_sec,num_prop,num_azi,BSR,precision,vectorize_method = 7)                                   # upper surface momentum thickness  
   197                                          
   198    196.8 MiB   -505.5 MiB           1       delta         = Theta*(3.15 + (1.72/((delta_star/Theta)- 1))) + delta_star
   199                                             # Update dimensions for computation      
   200    210.1 MiB     13.2 MiB           1       r         = vectorize(r,num_cpt,num_mic,num_sec,num_prop,num_azi,BSR,precision,vectorize_method = 1) 
   201    210.1 MiB      0.0 MiB           1       c         = vectorize(blade_chords,num_cpt,num_mic,num_sec,num_prop,num_azi,BSR,precision,vectorize_method = 1)  
   202    214.0 MiB      3.9 MiB           1       delta_r   = vectorize(delta_r,num_cpt,num_mic,num_sec,num_prop,num_azi,BSR,precision,vectorize_method = 1)   
   203    217.5 MiB      3.5 MiB           1       M         = vectorize(M,num_cpt,num_mic,num_sec,num_prop,num_azi,BSR,precision,vectorize_method = 3)    
   204    244.0 MiB     26.5 MiB           1       c_0       = vectorize(c_0,num_cpt,num_mic,num_sec,num_prop,num_azi,BSR,precision,vectorize_method = 4)  
   205    244.0 MiB      0.0 MiB           1       beta_sq   = vectorize(beta_sq,num_cpt,num_mic,num_sec,num_prop,num_azi,BSR,precision,vectorize_method = 4)  
   206    257.2 MiB     13.2 MiB           1       Omega     = vectorize(Omega,num_cpt,num_mic,num_sec,num_prop,num_azi,BSR,precision,vectorize_method = 4)  
   207    270.5 MiB     13.2 MiB           1       U_inf     = vectorize(U_inf,num_cpt,num_mic,num_sec,num_prop,num_azi,BSR,precision,vectorize_method = 4)  
   208    283.7 MiB     13.2 MiB           1       rho       = vectorize(rho,num_cpt,num_mic,num_sec,num_prop,num_azi,BSR,precision,vectorize_method = 4)  
   209    296.9 MiB     13.2 MiB           1       kine_visc = vectorize(kine_visc,num_cpt,num_mic,num_sec,num_prop,num_azi,BSR,precision,vectorize_method = 4)   
   210                                         
   211    336.6 MiB     39.7 MiB           1       X   = np.repeat(POS[:,:,:,:,:,:,0,:],2,axis = 6)                                    
   212    349.9 MiB     13.2 MiB           1       Y   = np.repeat(POS[:,:,:,:,:,:,1,:],2,axis = 6)
   213    363.1 MiB     13.2 MiB           1       Z   = np.repeat(POS[:,:,:,:,:,:,2,:],2,axis = 6)    
   214    396.2 MiB     33.1 MiB           1       X_2 = np.repeat(POS_2[:,:,:,:,:,:,0,:],2,axis = 6)
   215    409.4 MiB     13.2 MiB           1       Y_2 = np.repeat(POS_2[:,:,:,:,:,:,1,:],2,axis = 6)
   216    422.6 MiB     13.2 MiB           1       Z_2 = np.repeat(POS_2[:,:,:,:,:,:,2,:],2,axis = 6)
   217                                         
   218    448.0 MiB     25.3 MiB           1       R_s = np.repeat(np.linalg.norm(POS,axis = 6),2,axis = 6)  
   219                                             
   220                                             # ------------------------------------------------------------
   221                                             # ****** BLADE MOTION CALCULATIONS ****** 
   222                                             # the rotational Mach number of the blade section 
   223    448.1 MiB      0.1 MiB           1       frequency = np.linspace(1E2,1E4, BSR)                              
   224    448.1 MiB      0.0 MiB           1       omega     = 2*pi*frequency                                           
   225    462.4 MiB     14.3 MiB           1       omega     = vectorize(omega,num_cpt,num_mic,num_sec,num_prop,num_azi,BSR,precision,vectorize_method = 8)     
   226    475.7 MiB     13.2 MiB           1       r         = np.repeat(r[:,:,:,:,:,:,np.newaxis],2,axis = 6) 
   227    488.9 MiB     13.2 MiB           1       r         = np.array(r, dtype=precision)         
   228    488.9 MiB      0.0 MiB           1       c         = np.repeat(c[:,:,:,:,:,:,np.newaxis],2,axis = 6)          
   229    502.1 MiB     13.2 MiB           1       c         = np.array(c, dtype=precision) 
   230    502.1 MiB      0.0 MiB           1       delta_r   = np.repeat(delta_r[:,:,:,:,:,:,np.newaxis],2,axis = 6) 
   231    515.3 MiB     13.2 MiB           1       delta_r   = np.array(delta_r, dtype=precision) 
   232    515.3 MiB      0.0 MiB           1       M         = np.repeat(M,2,axis = 6)            
   233    528.6 MiB     13.2 MiB           1       M         = np.array(M, dtype=precision)     
   234    528.6 MiB      0.0 MiB           1       M_r       = Omega*r/c_0                                              
   235    568.3 MiB     39.7 MiB           1       epsilon   = X**2 + (beta_sq)*(Y**2 + Z**2)                           
   236    568.3 MiB      0.0 MiB           1       U_c       = 0.8*U_inf                           
   237    568.3 MiB      0.0 MiB           1       k_x       = omega/U_inf                                              
   238    581.5 MiB     13.2 MiB           1       l_r       = 1.6*U_c/omega                                            
   239    594.7 MiB     13.2 MiB           1       l_r       = 1.*U_c/omega      # ONLY FOR VALIDATION
   240    608.0 MiB     13.2 MiB           1       omega_d   = omega/(1 +  M_r*(X/R_s)) # dopler shifted frequency      
   241    621.2 MiB     13.2 MiB           1       mu        = omega_d*M/(U_inf*beta_sq)  # omega_d*M/U_inf*beta_p      
   242    634.4 MiB     13.2 MiB           1       bar_mu    = mu/(c/2)   # normalized by the semi chord                
   243    647.6 MiB     13.2 MiB           1       bar_k_x   = k_x/(c/2)                                                
   244                                         
   245                                             # ------------------------------------------------------------
   246                                             # ****** LOADING TERM CALCULATIONS ******   
   247                                             # equation 7                          
   248    647.6 MiB      0.0 MiB           1       K             = omega_d/U_c                                                       
   249    674.1 MiB     26.5 MiB           1       bar_K         = K /(c/2)                 
   250    700.6 MiB     26.5 MiB           1       gamma         = np.sqrt(((mu/epsilon)**2)*(X**2 + beta_sq*(Z**2)))                                                         
   251    700.6 MiB      0.0 MiB           1       bar_gamma     = gamma/(c/2)                                                       
   252    727.1 MiB     26.5 MiB           1       ss_1, cc_1    = fresnel(2*(bar_K + bar_mu*M + bar_gamma)) 
   253    727.1 MiB      0.0 MiB           1       cc_1          = np.array(cc_1, dtype=precision) 
   254    727.1 MiB      0.0 MiB           1       ss_1          = np.array(ss_1, dtype=precision)  
   255    753.6 MiB     26.5 MiB           1       E_star_1      = cc_1 - 1j*ss_1                                                        
   256    780.0 MiB     26.5 MiB           1       ss_2, cc_2    = fresnel(2*(bar_mu*X/epsilon + bar_gamma) )   
   257    780.0 MiB      0.0 MiB           1       cc_2          = np.array(cc_2, dtype=precision) 
   258    780.0 MiB      0.0 MiB           1       ss_2          = np.array(ss_2, dtype=precision) 
   259    806.5 MiB     26.5 MiB           1       E_star_2      = cc_2 - 1j*ss_2                                                        
   260    832.9 MiB     26.5 MiB           1       expression_A  = 1 - (1 + 1j)*E_star_1    
   261    846.2 MiB     13.2 MiB           1       triangle      = bar_k_x - bar_mu*X/epsilon + bar_mu*M                                             
   262    885.9 MiB     39.7 MiB           1       expression_B  = (np.exp(-1j*2*triangle))*(np.sqrt((K + mu*M + gamma)/(mu*X/epsilon +gamma))) *(1 + 1j)*E_star_2     
   263    912.3 MiB     26.5 MiB           1       norm_L_sq     = (1/triangle)*abs(np.exp(1j*2*triangle)*(expression_A + expression_B ))                             
   264    912.3 MiB      0.0 MiB           1       norm_L_sq     = np.array(norm_L_sq, dtype=precision) 
   265                                             # ------------------------------------------------------------
   266                                             # ****** EMPIRICAL WALL PRESSURE SPECTRUM ******  
   267                                             # equation 8 
   268    912.3 MiB      0.0 MiB           1       mu_tau              = (tau_w/rho)**0.5                                                          
   269    925.6 MiB     13.3 MiB           1       ones                = np.ones_like(mu_tau)                                                      
   270    965.3 MiB     39.7 MiB           1       R_T                 = (delta/Ue)/(kine_visc/(mu_tau**2))                                         
   271    965.3 MiB      0.0 MiB           1       beta_c              =  (Theta/tau_w)*dp_dx     
   272    965.3 MiB      0.0 MiB           1       Delta               = delta/delta_star                                                          
   273    978.5 MiB     13.2 MiB           1       e                   = 3.7 + 1.5*beta_c                                                          
   274   1005.0 MiB     26.5 MiB           1       d                   = 4.76*((1.4/Delta)**0.75)*(0.375*e - 1)                                                         
   275   1018.2 MiB     13.2 MiB           1       PI                  = 0.8*((beta_c + 0.5)**(3/4))                                                     
   276   1044.7 MiB     26.5 MiB           1       a                   = (2.82*(Delta**2)*((6.13*(Delta**(-0.75)) + d)**e))*(4.2*(PI/Delta) + 1)   
   277   1057.9 MiB     13.2 MiB           1       h_star              = np.minimum(3*ones,(0.139 + 3.1043*beta_c)) + 7                            
   278   1057.9 MiB      0.0 MiB           1       d_star              = d                                                                         
   279   1057.9 MiB      0.0 MiB           1       d_star[beta_c<0.5]  = np.maximum(ones,1.5*d)[beta_c<0.5]                                        
   280   1057.9 MiB      0.0 MiB           1       expression_F        = (omega*delta_star/Ue)                                                     
   281   1071.2 MiB     13.2 MiB           1       expression_C        = np.maximum(a, (0.25*beta_c - 0.52)*a)*(expression_F**2)                   
   282   1084.4 MiB     13.2 MiB           1       expression_D        = (4.76*(expression_F**0.75) + d_star)**e                                   
   283   1097.6 MiB     13.2 MiB           1       expression_E        = (8.8*(R_T**(-0.57))*expression_F)**h_star                                 
   284   1110.9 MiB     13.2 MiB           1       Phi_pp_expression   =  expression_C/( expression_D + expression_E)                                                     
   285   1110.9 MiB      0.0 MiB           1       Phi_pp              = ((tau_w**2)*delta_star*Phi_pp_expression)/Ue                                
   286                                         
   287                                         
   288                                             # ------------------------------------------------------------
   289                                             # ****** DIRECTIVITY ******      
   290                                             #   equation A1 to A5 in Prediction of Urban Air Mobility Multirotor VTOL Broadband Noise Using UCD-QuietFly 
   291                                         
   292   1110.9 MiB      0.0 MiB           1       l_x    = M_hub[:,:,:,:,:,:,0,:]
   293   1110.9 MiB      0.0 MiB           1       l_y    = M_hub[:,:,:,:,:,:,1,:]
   294   1110.9 MiB      0.0 MiB           1       l_z    = M_hub[:,:,:,:,:,:,2,:] 
   295                                         
   296   1183.7 MiB     72.8 MiB           1       A4    = l_y + Y_2 - r*np.sin(beta_p)*np.sin(phi)
   297   1210.1 MiB     26.5 MiB           3       A3    = (np.cos(t_r + t_v))*((np.cos(t_v))*(l_z + Z_2) - (np.sin(t_v))*(l_x + X_2))\
   298   1210.1 MiB      0.0 MiB           2           - np.sin(t_r+ t_v)*((np.cos(t_v))*(l_x + X_2) + (np.sin(t_v))*l_z + Z_2) + r*np.cos(beta_p)
   299   1223.4 MiB     13.2 MiB           3       A2    =  (np.cos(t_r + t_v))*((np.cos(t_v))*(l_x + X_2) + (np.sin(t_v))*(l_z + Z_2))\
   300   1223.4 MiB      0.0 MiB           2           + np.sin(t_r+ t_v)*((np.cos(t_v))*(l_z + Z_2) - (np.sin(t_v))*l_x + X_2) - r*np.cos(phi)*np.cos(beta_p)
   301   1230.0 MiB      6.6 MiB           1       A1    = (np.cos( alpha_eff)*A3 + np.sin( alpha_eff)*np.cos(beta_p)*A4 - np.sin( alpha_eff)*np.sin(beta_p)*A2)**2
   302   1256.5 MiB     13.2 MiB           4       D_phi = A1/( (np.sin( alpha_eff)*A3 - np.cos( alpha_eff)*np.cos(beta_p)*A4 \
   303   1256.5 MiB     13.2 MiB           1                     + np.cos( alpha_eff)*np.sin(beta_p)*A2**2)\
   304   1256.5 MiB      0.0 MiB           2                    + (np.sin(beta_p)*A4 + np.cos(beta_p)*A2)**2)**2 
   305                                         
   306                                             # Acousic Power Spectrial Density from each blade - equation 6 
   307   1256.5 MiB      0.0 MiB           1       mult   = ((omega/c_0 )**2)*c**2*delta_r*(1/(32*pi**2))*(B/(2*pi)) 
   308   1256.5 MiB      0.0 MiB           1       mult   = np.array(mult, dtype=precision)     
   309   1269.2 MiB     12.7 MiB           1       S_pp   = mult[:,:,:,:,0,:,:]*np.trapz(D_phi*norm_L_sq*l_r*Phi_pp,axis = 4)
   310                                         
   311                                             # equation 9 
   312   1269.2 MiB      0.0 MiB           1       SPL = 10*np.log10((2*pi*S_pp)/((p_ref)**2))
   313                                         
   314   1269.5 MiB      0.3 MiB           1       SPL_surf                     = 10**(0.1*SPL[:,:,:,:,:,0]) + 10**(0.1*SPL[:,:,:,:,:,1]) # equation 10 inside brackets 
   315   1269.5 MiB      0.0 MiB           1       SPL_rotor                    = 10*np.log10(np.sum(SPL_surf,axis=3))  # equation 10 inside brackets  
   316   1269.6 MiB      0.1 MiB           1       SPL_rotor_dBA                = A_weighting(SPL_rotor,frequency) 
   317                                              
   318                                             # convert to 1/3 octave spectrum   
   319   1269.6 MiB      0.0 MiB           1       f = np.repeat(np.atleast_2d(frequency),num_cpt,axis = 0) 
   320                                         
   321   1269.6 MiB      0.0 MiB           1       res.p_pref_broadband                    = 10**(SPL_rotor /10)     
   322   1269.6 MiB      0.0 MiB           1       res.p_pref_broadband_dBA                = 10**(SPL_rotor_dBA /10)
   323   1269.6 MiB      0.0 MiB           1       res.SPL_prop_broadband_spectrum         = SPL_rotor  
   324   1269.6 MiB      0.0 MiB           1       res.SPL_prop_broadband_spectrum_dBA     = SPL_rotor_dBA
   325   1269.9 MiB      0.3 MiB           1       res.SPL_prop_broadband_1_3_spectrum     = SPL_harmonic_to_third_octave(SPL_rotor,f,settings)  
   326   1269.9 MiB      0.0 MiB           1       res.SPL_prop_broadband_1_3_spectrum_dBA = SPL_harmonic_to_third_octave(SPL_rotor_dBA,f,settings)  
   327                                             
   328   1269.9 MiB      0.0 MiB           1       return 



